<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>lInteractor</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import RxSwift
import ReactorKit

protocol &lt;#Name#&gt;Interactable {
  func back()
}

final class &lt;#Name#&gt;Interactor: ReactorKit.Reactor {
  enum Action {
    case show&lt;#Next#&gt;Scene
    case back
  }
  enum Mutation {
    case setShow&lt;#Next#&gt;Scene
    case setBack(Bool)
  }
  struct State {
    @Pulse var shouldShow&lt;#Next#&gt;Scene = false
    @Pulse var shouldBack = false
  }
  
  let initialState: State
  let provider: ServiceProviderType
  private let forwardedAction = PublishSubject&lt;Action&gt;()
  private let forwardedMutation = PublishSubject&lt;Mutation&gt;()
  
  init(provider: ServiceProviderType) {
    self.provider = provider
    self.initialState = State()
  }
  
  func transform(action: Observable&lt;Action&gt;) -&gt; Observable&lt;Action&gt; {
    .merge(
      action,
      self.forwardedAction
        .observe(on: ConcurrentDispatchQueueScheduler(qos: .userInitiated))
    )
  }
  func mutate(action: Action) -&gt; Observable&lt;Mutation&gt; {
    switch action {
    case .show&lt;#Next#&gt;Scene:
      return .just(.setShow&lt;#Next#&gt;Scene)
    case .back:
      return .just(.setBack(true))
    }
  }
  func transform(mutation: Observable&lt;Mutation&gt;) -&gt; Observable&lt;Mutation&gt; {
    .merge(
      mutation,
      self.forwardedMutation
    )
  }
  func reduce(state: State, mutation: Mutation) -&gt; State {
    var state = state
    switch mutation {
    case .setShow&lt;#Next#&gt;Scene:
      state.shouldShow&lt;#Next#&gt;Scene = true
    case let .setBack(bool):
      state.shouldBack = bool
    }
    return state
  }
}

extension &lt;#Name#&gt;Interactor: &lt;#Name#&gt;Interactable {
  func back() {
    self.forwardedAction.onNext(.back)
  }
}

extension &lt;#Name#&gt;Interactor: &lt;#Child1#&gt;Interactable {
  func show&lt;#Next#&gt;Scene() {
    self.forwardedAction.onNext(.show&lt;#Next#&gt;Scene)
  }
}

extension &lt;#Name#&gt;Interactor: &lt;#Child2#&gt;Interactable {
  
}

</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>76F7511F-E051-4F8C-93BB-D9693B5AE573</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>lInteractor</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
