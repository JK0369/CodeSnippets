<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>lCoordinator</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import UIKit
import ReactorKit
import RxSwift
import RxCocoa

final class OnboardingCoordinator: UINavigationController, ReactorKit.View {
  // MARK: UI
  private let &lt;#lowerChild1#&gt;ViewController: &lt;#UpperChild1#&gt;ViewController
  private let &lt;#lowerChild1#&gt;ViewReactor: &lt;#UpperChild1#&gt;ViewReactor
  private let &lt;#lowerChild2#&gt;ViewController: &lt;#UpperChild2#&gt;ViewController
  private let &lt;#lowerChild2#&gt;ViewReactor: &lt;#UpperChild2#&gt;ViewReactor
  
  // MARK: Propertyies
  var disposeBag = DisposeBag()
  
  // MARK: Initializer
  required init(interactor: OnboardingInteractor) {
    self.&lt;#lowerChild1#&gt;ViewReactor = &lt;#UpperChild1#&gt;ViewReactor(provider: interactor.provider, interactor: interactor)
    self.&lt;#lowerChild1#&gt;ViewController = &lt;#UpperChild1#&gt;ViewController(reactor: self.&lt;#lowerChild1#&gt;ViewReactor)
    self.&lt;#lowerChild2#&gt;ViewReactor = &lt;#UpperChild2#&gt;ViewReactor(provider: interactor.provider, interactor: interactor)
    self.&lt;#lowerChild2#&gt;ViewController = &lt;#UpperChild2#&gt;ViewController(reactor: self.&lt;#lowerChild2#&gt;ViewReactor)
    super.init(rootViewController: self.&lt;#lowerChild1#&gt;ViewController)
    self.reactor = interactor
  }
  @available(*, unavailable)
  required init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }
  
  // MARK: Binding
  func bind(reactor interactor: OnboardingInteractor) {
    interactor.state.shouldBack
      .observe(on: MainScheduler.asyncInstance)
      .bind(with: self) { ss, _ in ss.popViewController(animated: true) }
      .disposed(by: self.disposeBag)
    
    interactor.state.shouldShow&lt;#UpperChild2#&gt;Scene
      .filterTrue()
      .observe(on: MainScheduler.asyncInstance)
      .bind(with: self) { ss, _ in ss.pushViewController(ss.&lt;#lowerChild2#&gt;ViewController, animated: true) }
      .disposed(by: self.disposeBag)
  }
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>46859564-4B12-4442-9DB7-D99560708E9B</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>lCoordinator</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
